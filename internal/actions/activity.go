package actions

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// Make a HTTP GET request to Github API
// example:  https://api.github.com/users/<username>/events
// Parse the response and return the activity

// googled this to get the struct for the response
type Activity struct {
	Type 			string `json:"type"`
	Repo 			struct {
		Name string `json:"name"`
	}
	CreatedAt string `json:"created_at"`
}

var ActivityResponse []Activity

func FetchGithubActivity(username string) ([]Activity ,error) {
	resp, err := http.Get("https://api.github.com/users/" + username + "/events")
	if err != nil {
		fmt.Println("Error fetching activity: ", err)
	}

	if err := json.NewDecoder(resp.Body).Decode(&ActivityResponse); err != nil {
		fmt.Println("Error decoding activity response: ", err)
	}
	
	defer resp.Body.Close()
	return ActivityResponse, nil
}

// need to display formatted resp e.g.
// Output:
// 1. Pushed to repo: <repo> at <time>
// 2. Created repo: <repo> at <time>

// autogenerated copilot code
// needs to be optimized
func DisplayFormattedActivity(activity []Activity) {
	for i, a := range activity {
		switch a.Type {
		case "PushEvent":
			// struct needed reformatting to allow a.Repo.Name to be accessed
			// instead of a.Repo (returned an error)
			fmt.Printf("%d. Pushed to repo: %s at %s\n", i+1, a.Repo.Name, a.CreatedAt)
		case "CreateEvent":
			fmt.Printf("%d. Created repo: %s at %s\n", i+1, a.Repo, a.CreatedAt)
		}
	}
}